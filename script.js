// This function runs when the entire HTML document has been loaded.
document.addEventListener('DOMContentLoaded', () => {

    // --- Get references to all the HTML elements we need to work with ---
    const phase1Div = document.getElementById('phase1');
    const phase2Div = document.getElementById('phase2');
    const icalUrlInput = document.getElementById('icalUrlInput');
    const saveLinkBtn = document.getElementById('saveLinkBtn');
    const eventListDiv = document.getElementById('event-list');
    const saveFilterBtn = document.getElementById('saveFilterBtn');

    // --- Function to handle PHASE 1: Saving the Link ---
    function saveLinkAndFetch() {
        const icalUrl = icalUrlInput.value;
        if (!icalUrl) {
            alert("Please enter your iCal URL.");
            return;
        }

        console.log("Phase 1: Saving link...");
        const tempConfig = { icalUrl: icalUrl };
        const content = JSON.stringify(tempConfig, null, 2);
        
        // This helper function builds the special GitHub URL
        redirectToGitHubCreateFile('temp-config.json', content, "Phase 1: Save iCal link for event fetching");
    }

    // --- Function to handle PHASE 2: Saving the Final Filter ---
    function saveFinalFilter() {
        const icalUrl = icalUrlInput.value; // It will be read-only by this phase
        const checkedBoxes = document.querySelectorAll('#event-list input[type="checkbox"]:checked');
        const filters = Array.from(checkedBoxes).map(cb => cb.value);

        console.log("Phase 2: Saving final filter...");
        const finalConfig = {
            icalUrl: icalUrl,
            filtersToHide: filters
        };
        const content = JSON.stringify(finalConfig, null, 2);

        redirectToGitHubCreateFile('config.json', content, "Phase 2: Save final calendar filters");
    }

    // --- This function runs on page load to see if we're in Phase 1 or Phase 2 ---
    async function checkConfigurationState() {
        console.log("Checking configuration state...");
        try {
            // Try to fetch the list of events generated by our backend action
            // Adding a cache-buster to ensure we get the latest version
            const response = await fetch(`event-types.json?v=${new Date().getTime()}`);
            
            if (!response.ok) {
                // event-types.json doesn't exist yet, so we are in Phase 1
                console.log("State: Phase 1 (event-types.json not found).");
                phase1Div.style.display = 'block';
                phase2Div.style.display = 'none';
                return;
            }

            // We found the file! We are in Phase 2.
            console.log("State: Phase 2 (event-types.json found).");
            const data = await response.json();
            
            // Populate the UI for Phase 2
            icalUrlInput.value = data.icalUrl; // This input is in phase1, but we'll re-use it
            
            eventListDiv.innerHTML = ''; // Clear any old content
            data.eventTypes.forEach(event => {
                const label = document.createElement('label');
                label.className = 'event-item';
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.value = event;
                label.appendChild(checkbox);
                label.appendChild(document.createTextNode(` ${event}`));
                eventListDiv.appendChild(label);
            });

            // Show Phase 2 and hide Phase 1
            phase1Div.style.display = 'none';
            phase2Div.style.display = 'block';

        } catch (e) {
            // Network error or other issue, assume Phase 1
            console.log("State: Phase 1 (Error during fetch).");
            phase1Div.style.display = 'block';
            phase2Div.style.display = 'none';
        }
    }

    // --- Helper function to build the GitHub URL ---
    function redirectToGitHubCreateFile(filename, content, message) {
        // The repo path is simply the first part of the URL's pathname
        // e.g., on "user.github.io/my-repo/index.html", the path is "/my-repo/"
        const repoPath = window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/') + 1);
        const githubRepoUrl = `https://github.com${repoPath}`;
        
        const encodedContent = encodeURIComponent(content);
        const encodedMessage = encodeURIComponent(message);
        const newFileUrl = `${githubRepoUrl}new/main?filename=${filename}&value=${encodedContent}&message=${encodedMessage}`;
        
        console.log(`Redirecting to: ${newFileUrl}`);
        window.location.href = newFileUrl;
    }

    // --- This is the most important part: attaching functions to buttons ---
    saveLinkBtn.addEventListener('click', saveLinkAndFetch);
    saveFilterBtn.addEventListener('click', saveFinalFilter);

    // --- Run the initial check to set up the page correctly ---
    checkConfigurationState();
});

// script.js

// --- PHASE 1: SAVING THE LINK ---
function saveLinkAndFetch() {
    const icalUrl = document.getElementById('icalUrl').value;
    if (!icalUrl) {
        alert("Please enter your iCal URL.");
        return;
    }
    
    // Create a temporary config object
    const tempConfig = { icalUrl: icalUrl };
    const content = JSON.stringify(tempConfig, null, 2);

    // Redirect user to create temp-config.json
    const repoPath = window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/') + 1);
    const githubRepoUrl = `https://github.com${repoPath}`;
    const filename = 'temp-config.json';
    const encodedContent = encodeURIComponent(content);
    const message = encodeURIComponent("Phase 1: Save iCal link for event fetching");
    const newFileUrl = `${githubRepoUrl}new/main?filename=${filename}&value=${encodedContent}&message=${message}`;
    
    window.location.href = newFileUrl;
}

// --- PHASE 2: SAVING THE FILTER ---
function saveFinalFilter() {
    const icalUrl = document.getElementById('icalUrl').value;
    const checkedBoxes = document.querySelectorAll('#event-list input[type="checkbox"]:checked');
    const filters = Array.from(checkedBoxes).map(cb => cb.value);

    // Create the final config object
    const finalConfig = {
        icalUrl: icalUrl,
        filtersToHide: filters
    };
    const content = JSON.stringify(finalConfig, null, 2);

    // Redirect user to create the final config.json
    const repoPath = window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/') + 1);
    const githubRepoUrl = `https://github.com${repoPath}`;
    const filename = 'config.json';
    const encodedContent = encodeURIComponent(content);
    const message = encodeURIComponent("Phase 2: Save final calendar filters");
    const newFileUrl = `${githubRepoUrl}new/main?filename=${filename}&value=${encodedContent}&message=${message}`;
    
    window.location.href = newFileUrl;
}


// --- ON PAGE LOAD ---
// This function runs as soon as the page is loaded to check the state.
async function checkConfigurationState() {
    // Try to fetch the list of events generated by our backend action
    try {
        const response = await fetch('event-types.json');
        if (!response.ok) {
            // event-types.json doesn't exist yet, so we are in Phase 1
            document.getElementById('phase1').style.display = 'block';
            return;
        }

        // We found the file! We are in Phase 2.
        const data = await response.json();
        
        // Populate the UI for Phase 2
        document.getElementById('icalUrl').value = data.icalUrl;
        document.getElementById('icalUrl').readOnly = true; // Lock the input
        
        const eventListDiv = document.getElementById('event-list');
        eventListDiv.innerHTML = '';
        data.eventTypes.forEach(event => {
            const label = document.createElement('label');
            label.className = 'event-item';
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.value = event;
            label.appendChild(checkbox);
            label.appendChild(document.createTextNode(` ${event}`));
            eventListDiv.appendChild(label);
        });

        // Show the right sections
        document.getElementById('phase1').style.display = 'none';
        document.getElementById('phase2').style.display = 'block';

    } catch (e) {
        // Network error or file doesn't exist, assume Phase 1
        document.getElementById('phase1').style.display = 'block';
    }
}

// Modify the HTML to have Phase 1 and Phase 2 divs
document.addEventListener('DOMContentLoaded', () => {
    // You would wrap your HTML sections in divs with id="phase1" and id="phase2"
    // For brevity, I'm calling the check function directly.
    checkConfigurationState();
});
